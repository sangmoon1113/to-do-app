@page "/schedule"

@using Microsoft.EntityFrameworkCore;
@using to_do.Data;
@using to_do.Layers._4.Infrastructure;
@inject DialogService DialogService
@inject IDbContextFactory<AppDbContext> DbFactory

<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Data.AppointmentData" Data=@appointments StartProperty="Start" EndProperty="End"
    TextProperty="Text" SelectedIndex="2"
    SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
    <RadzenMonthView />
</RadzenScheduler>

<EventConsole @ref=@console />

@code {
    RadzenScheduler<Data.AppointmentData> scheduler;
    EventConsole console;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    protected override async Task OnInitializedAsync()
    {
        using var dbContext = await DbFactory.CreateDbContextAsync();
    }

    IList<Data.AppointmentData> appointments = new List<Data.AppointmentData>
    {
        // new Data.AppointmentData { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Text = "Birthday" },
        // new Data.AppointmentData { Start = DateTime.Today.AddDays(-11), End = DateTime.Today.AddDays(-10), Text = "Day off" },
        // new Data.AppointmentData { Start = DateTime.Today.AddDays(-10), End = DateTime.Today.AddDays(-8), Text = "Work from home" },
        // new Data.AppointmentData { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(12), Text = "Online meeting" },
        // new Data.AppointmentData { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(13), Text = "Skype call" },
        // new Data.AppointmentData { Start = DateTime.Today.AddHours(14), End = DateTime.Today.AddHours(14).AddMinutes(30), Text = "Dentist appointment" },
        // new Data.AppointmentData { Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(12), Text = "Vacation" },
    };

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        console.Log($"SlotSelect: Start={args.Start} End={args.End}");

        if (args.View.Text != "Year")
        {
            // Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
            //     new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

            // if (data != null)
            // {
            //     appointments.Add(data);
            //     // Either call the Reload method or reassign the Data property of the Scheduler
            //     await scheduler.Reload();
            // }
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Data.AppointmentData> args)
    {
        console.Log($"AppointmentSelect: Appointment={args.Data.Text}");

        // await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", args.Data } });

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Data.AppointmentData> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }
}