@page "/"

@using Microsoft.EntityFrameworkCore;
@using to_do.Data;
@using to_do.Layers._2.Application;
@using to_do.Layers._4.Infrastructure;
@inject DialogService DialogService
@inject IDbContextFactory<AppDbContext> DbFactory
@inject ScheduleApplicationService ScheduleApplicationService

<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Data.ScheduleData" Data=@appointments StartProperty="Start" EndProperty="Finish"
    TextProperty="Title" SelectedIndex="1" 
    SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
    <RadzenWeekView />
    <RadzenMonthView />
</RadzenScheduler>

<EventConsole @ref=@console />

@code {
    RadzenScheduler<Data.ScheduleData> scheduler;
    EventConsole console;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    protected override async Task OnInitializedAsync()
    {
        using var dbContext = await DbFactory.CreateDbContextAsync();
        await dbContext.Database.EnsureCreatedAsync();

        appointments = await ScheduleApplicationService.GetAllSchedulesAsync();
    }

    List<Data.ScheduleData> appointments = new();

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        console.Log($"SlotSelect: Start={args.Start} Finish={args.End}");

        if (args.View.Text != "Year")
        {
            Data.ScheduleData data = await DialogService.OpenAsync<AddSchedulePage>("Add Appointment",
                new Dictionary<string, object> { { "Start", args.Start }, { "Finish", args.End } });

            if (data != null)
            {
                appointments.Add(data);

                await ScheduleApplicationService.AddSchedulesAsync(data);

                // Either call the Reload method or reassign the Data property of the Scheduler
                await scheduler.Reload();
            }
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Data.ScheduleData> args)
    {
        console.Log($"AppointmentSelect: Appointment={args.Data.Title}");

        await DialogService.OpenAsync<EditSchedulePage>("Edit Appointment", new Dictionary<string, object> { { "ScheduleData", args.Data } });

        await ScheduleApplicationService.UpdateSchedulesAsync(args.Data);

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Data.ScheduleData> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Title == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }
}